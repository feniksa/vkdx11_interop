#version 450
// these defs are provided by shaderc lib
// #define WORKGROUP_SIZE 32
// #define AOVS_FORMAT rgba8/rgba32f provided by shaderc lib
// #define OUTPUT_FORMAT rgba8/rgba32f provided by shaderc lib
// #define AOVS_ARE_SAMPLED_IMAGES

layout (set = 0, binding = 0) uniform UBO 
{
    ivec2 tileOffset;
    ivec2 tileSize;
    float shadowIntensity;
} ubo;
layout (set = 0, binding = 1, OUTPUT_FORMAT) uniform image2D outputImage;
#if AOVS_ARE_SAMPLED_IMAGES
layout (set = 0, binding = 2) uniform sampler2D aovColor;
layout (set = 0, binding = 3) uniform sampler2D aovOpacity;
layout (set = 0, binding = 4) uniform sampler2D aovShadowCatcher;
layout (set = 0, binding = 5) uniform sampler2D aovReflectionCatcher;
layout (set = 0, binding = 6) uniform sampler2D aovMattePass;
layout (set = 0, binding = 7) uniform sampler2D aovBackground;
#define LOAD_AOV(texSampler, xy) texture(texSampler, vec2((float(xy.x) + 0.5f) / ubo.tileSize.x, (float(xy.y) + 0.5f) / ubo.tileSize.y))
#else
layout (set = 0, binding = 2, AOVS_FORMAT) uniform readonly image2D aovColor;
layout (set = 0, binding = 3, AOVS_FORMAT) uniform readonly image2D aovOpacity;
layout (set = 0, binding = 4, AOVS_FORMAT) uniform readonly image2D aovShadowCatcher;
layout (set = 0, binding = 5, AOVS_FORMAT) uniform readonly image2D aovReflectionCatcher;
layout (set = 0, binding = 6, AOVS_FORMAT) uniform readonly image2D aovMattePass;
layout (set = 0, binding = 7, AOVS_FORMAT) uniform readonly image2D aovBackground;
#define LOAD_AOV(img, xy) imageLoad(img, xy)
#endif

vec4 clamp4(vec4 val, float minVal, float maxVal)
{
    return vec4(
        clamp(val.x, minVal, maxVal),
        clamp(val.y, minVal, maxVal),
        clamp(val.z, minVal, maxVal),
        clamp(val.w, minVal, maxVal)
    );
}

vec4 compose(ivec2 xy)
{
    vec4 color = LOAD_AOV(aovColor, xy);
    float opacity = LOAD_AOV(aovOpacity, xy).x;
    float shadow = min(ubo.shadowIntensity * LOAD_AOV(aovShadowCatcher, xy).x, 1.0f);
    float reflection = LOAD_AOV(aovReflectionCatcher, xy).x;
    vec4 mattePass = LOAD_AOV(aovMattePass, xy);
    vec4 background = LOAD_AOV(aovBackground, xy);

    vec4 colorSubMatte = clamp4(color - mattePass, 0.0f, 1.0f);
    mattePass = background * (1.0f - min(opacity + reflection, 1.0f)) + mattePass;
    color.xyz = mattePass.xyz * (1.0f - shadow) + colorSubMatte.xyz;
    color.w = opacity + shadow;

    return clamp4(color, 0.0f, 1.0f);
}

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;
void main() {
    ivec2 xy = ubo.tileOffset + ivec2(gl_GlobalInvocationID.xy);
    ivec2 resolution = imageSize(outputImage);
    if (xy.x >= resolution.x || xy.y >= resolution.y)
        return;

    imageStore(outputImage, xy, compose(ivec2(gl_GlobalInvocationID.xy)));
}
