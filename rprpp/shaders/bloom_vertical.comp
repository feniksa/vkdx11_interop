#version 450
// these defs are provided by shaderc lib
// #define WORKGROUP_SIZE 32
// #define INPUT_FORMAT rgba8/rgba32f
// #define OUTPUT_FORMAT rgba8/rgba32f

layout (set = 0, binding = 0) uniform UBO 
{
    int radiusInPixel;
    float radius;
    float brightnessScale;
    float threshold;
} ubo;
layout (set = 0, binding = 1, OUTPUT_FORMAT) uniform image2D outputImage;
layout (set = 0, binding = 2, rgba32f) uniform image2D tmpImage;
layout (set = 0, binding = 3, INPUT_FORMAT) uniform readonly image2D inputImage;

#define mix(x, y, a) ((x) + ((y) - (x)) * (a))
#define M_PI 3.14159265358979323846

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;
void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 resolution = imageSize(outputImage);
    if (coord.x >= resolution.x || coord.y >= resolution.y)
        return;
    
    vec4 bloom = vec4(0.0f);
    float rSquared = ubo.radiusInPixel * ubo.radiusInPixel;
    float rOver3 = ubo.radiusInPixel / 3.0f;
    float rOver3Squared = rOver3 * rOver3;
    vec3 LUMAWHITEPOINT = vec3(0.2126f, 0.7152f, 0.0722f);
    vec4 sum = vec4(0.0f);
    for (int j = -ubo.radiusInPixel; j <= ubo.radiusInPixel; j++) {
        if (coord.y + j < 0 || coord.y + j >= resolution.y) {
            continue;
        }
        
        float x2y2 = j * j;
        float w = exp(-x2y2 / (2.0f * rOver3Squared));
        w *= 1.0f - smoothstep(0, rSquared, x2y2);
        
        vec4 pixel = imageLoad(inputImage, ivec2(coord.x, coord.y + j));
        float luminance = dot(pixel.xyz, LUMAWHITEPOINT);
        if (luminance < ubo.threshold)
        {
            w *= 0.0f;
        }
        else if (luminance < 2.0f * ubo.threshold)
        {
            w *= mix(0.0f, 1.0f, 2.0f * ubo.threshold - luminance);
        }
        sum += pixel * w;
    }
    bloom = sum * vec4(1.f / (sqrt(2.f * M_PI) * rOver3));
    imageStore(tmpImage, coord, bloom);
}
